// <auto-generated />
using FiscalLabService.Repository.PostgreSql.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FiscalLabService.Repository.PostgreSql.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240121162414_DisplayName")]
    partial class DisplayName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Association", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("associations", (string)null);
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("display_name");

                    b.Property<bool>("HasPercentageOptions")
                        .HasColumnType("boolean")
                        .HasColumnName("has_percentage_options");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("code");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("page");

                    b.HasKey("Id");

                    b.ToTable("menus", (string)null);
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Plant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("plants", (string)null);
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.VisitPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("visit_pages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Principal",
                            Name = "Main"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Balança de Cana",
                            Name = "SugarcaneBalance"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Sonda/Desintegrador",
                            Name = "DesintegratorProbe"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Balança Analítica/Temperatura",
                            Name = "AnalyticalBalance"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Prensa/Refratômetro",
                            Name = "PressRefractometer"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Clarificação/Sacarímetro",
                            Name = "ClarificationSaccharimeter"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Equipamentos de Aferição/Medias",
                            Name = "BenchmarkingEquipment"
                        },
                        new
                        {
                            Id = 8,
                            DisplayName = "Consistência do Sistema",
                            Name = "SystemConsistency"
                        },
                        new
                        {
                            Id = 9,
                            DisplayName = "Conclusão",
                            Name = "Conclusion"
                        });
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Association", b =>
                {
                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("AssociationId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("city");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("state");

                            b1.HasKey("AssociationId");

                            b1.ToTable("associations");

                            b1.WithOwner()
                                .HasForeignKey("AssociationId");
                        });

                    b.OwnsMany("FiscalLabService.Domain.ValueObjects.Email", "Emails", b1 =>
                        {
                            b1.Property<string>("association_id")
                                .HasColumnType("character varying(36)");

                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("id"));

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("address");

                            b1.HasKey("association_id", "id");

                            b1.ToTable("emails", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("association_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Emails");
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Menu", b =>
                {
                    b.OwnsMany("FiscalLabService.Domain.ValueObjects.Option", "Options", b1 =>
                        {
                            b1.Property<string>("menu_id")
                                .HasColumnType("character varying(36)");

                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("menu_id", "id");

                            b1.ToTable("options", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("menu_id");
                        });

                    b.Navigation("Options");
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Plant", b =>
                {
                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("PlantId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("address");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("state");

                            b1.HasKey("PlantId");

                            b1.ToTable("plants");

                            b1.WithOwner()
                                .HasForeignKey("PlantId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
