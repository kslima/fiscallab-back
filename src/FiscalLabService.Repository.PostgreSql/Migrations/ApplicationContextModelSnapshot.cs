// <auto-generated />
using System;
using FiscalLabService.Repository.PostgreSql.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FiscalLabService.Repository.PostgreSql.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Association", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("associations", (string)null);
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("display_name");

                    b.Property<bool>("HasPercentageOptions")
                        .HasColumnType("boolean")
                        .HasColumnName("has_percentage_options");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("code");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("page");

                    b.HasKey("Id");

                    b.ToTable("menus", (string)null);
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Plant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("plants", (string)null);
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Visit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("Id");

                    b.ToTable("visits", (string)null);
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.VisitPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("visit_pages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Principal",
                            Name = "Main"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Balança de Cana",
                            Name = "SugarcaneBalance"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Sonda/Desintegrador",
                            Name = "DesintegratorProbe"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Balança Analítica/Temperatura",
                            Name = "AnalyticalBalance"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Prensa/Refratômetro",
                            Name = "PressRefractometer"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Clarificação/Sacarímetro",
                            Name = "ClarificationSaccharimeter"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Equipamentos de Aferição/Medias",
                            Name = "BenchmarkingEquipment"
                        },
                        new
                        {
                            Id = 8,
                            DisplayName = "Consistência do Sistema",
                            Name = "SystemConsistency"
                        },
                        new
                        {
                            Id = 9,
                            DisplayName = "Conclusão",
                            Name = "Conclusion"
                        });
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Association", b =>
                {
                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("AssociationId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("city");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("state");

                            b1.HasKey("AssociationId");

                            b1.ToTable("associations");

                            b1.WithOwner()
                                .HasForeignKey("AssociationId");
                        });

                    b.OwnsMany("FiscalLabService.Domain.ValueObjects.Email", "Emails", b1 =>
                        {
                            b1.Property<string>("association_id")
                                .HasColumnType("character varying(36)");

                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("id"));

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("address");

                            b1.HasKey("association_id", "id");

                            b1.ToTable("emails", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("association_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Emails");
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Menu", b =>
                {
                    b.OwnsMany("FiscalLabService.Domain.ValueObjects.Option", "Options", b1 =>
                        {
                            b1.Property<string>("menu_id")
                                .HasColumnType("character varying(36)");

                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("menu_id", "id");

                            b1.ToTable("options", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("menu_id");
                        });

                    b.Navigation("Options");
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Plant", b =>
                {
                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("PlantId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("address");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("state");

                            b1.HasKey("PlantId");

                            b1.ToTable("plants");

                            b1.WithOwner()
                                .HasForeignKey("PlantId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("FiscalLabService.Domain.Entities.Visit", b =>
                {
                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.AnalyticalBalance", "AnalyticalBalance", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("AverageAmbientTemperature")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_average_ambient_temperature");

                            b1.Property<string>("CalibratedBalance")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_calibrated_balance");

                            b1.Property<string>("CalibrationCertificateBalance")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_calibration_certificate_balance");

                            b1.Property<string>("FinalWeight")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_final_weight");

                            b1.Property<string>("HomogeneousWeight")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_homogeneous_weight");

                            b1.Property<string>("LeveledBalance")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_leveled_balance");

                            b1.Property<string>("Observations5")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_observations5");

                            b1.Property<string>("Observations6")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("analytical_balance_observations6");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.BasicInformation", "BasicInformation", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("AssociationId")
                                .IsRequired()
                                .HasColumnType("character varying(36)")
                                .HasColumnName("basic_information_association_id");

                            b1.Property<string>("Consultant")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("basic_information_consultant");

                            b1.Property<string>("Inspector")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("basic_information_inspector");

                            b1.Property<string>("LaboratoryLeader")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("basic_information_laboratory_leader");

                            b1.Property<string>("Leader")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("basic_information_leader");

                            b1.Property<string>("PlantId")
                                .IsRequired()
                                .HasColumnType("character varying(36)")
                                .HasColumnName("basic_information_plant_id");

                            b1.Property<DateOnly>("VisitDate")
                                .HasColumnType("date")
                                .HasColumnName("basic_information_visit_date");

                            b1.Property<TimeOnly>("VisitTime")
                                .HasColumnType("time without time zone")
                                .HasColumnName("basic_information_visit_time");

                            b1.HasKey("VisitId");

                            b1.HasIndex("AssociationId");

                            b1.HasIndex("PlantId");

                            b1.ToTable("visits");

                            b1.HasOne("FiscalLabService.Domain.Entities.Association", "Association")
                                .WithMany()
                                .HasForeignKey("AssociationId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("FiscalLabService.Domain.Entities.Plant", "Plant")
                                .WithMany()
                                .HasForeignKey("PlantId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("VisitId");

                            b1.Navigation("Association");

                            b1.Navigation("Plant");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.BenchmarkingEquipment", "BenchmarkingEquipment", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<decimal>("AccomplishedCrop")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_accomplished_crop");

                            b1.Property<decimal>("AtrVariation")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_atr_variation");

                            b1.Property<decimal>("CurrentAtr")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_current_atr");

                            b1.Property<decimal>("CurrentFiber")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_current_fiber");

                            b1.Property<decimal>("ExpectedCrop")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_expected_crop");

                            b1.Property<decimal>("FiberVariation")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_fiber_variation");

                            b1.Property<string>("Gm1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_gm1");

                            b1.Property<string>("Gm100")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_gm100");

                            b1.Property<string>("Gm500")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_gm500");

                            b1.Property<string>("LoadCell")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_load_cell");

                            b1.Property<string>("Observations11")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_observations11");

                            b1.Property<string>("Observations12")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_observations12");

                            b1.Property<string>("Pachymeter")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_pachymeter");

                            b1.Property<decimal>("PercentageRealized")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_percentage_realized");

                            b1.Property<decimal>("PreviousAtr")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_previous_atr");

                            b1.Property<decimal>("PreviousCrop")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_previous_crop");

                            b1.Property<decimal>("PreviousFiber")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_previous_fiber");

                            b1.Property<string>("Range10")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_range10");

                            b1.Property<string>("Range20")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_range20");

                            b1.Property<string>("Range30")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_range30");

                            b1.Property<string>("SucroseTest")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_sucrose_test");

                            b1.Property<string>("Tachometer")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_tachometer");

                            b1.Property<string>("Thermometer")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_thermometer");

                            b1.Property<decimal>("VariationBetweenCrops")
                                .HasColumnType("numeric")
                                .HasColumnName("benchmarking_equipment_variation_between_crops");

                            b1.Property<string>("Z100")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_z100");

                            b1.Property<string>("Z25")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_z25");

                            b1.Property<string>("Z50")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_z50");

                            b1.Property<string>("Z75")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("benchmarking_equipment_z75");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.ClarificationSaccharimeter", "ClarificationSaccharimeter", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("Agitation")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_agitation");

                            b1.Property<string>("Benchmarking")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_benchmarking");

                            b1.Property<string>("Bottle")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_bottle");

                            b1.Property<string>("BottleAfterClarifiedVolume")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_bottle_after_clarified_volume");

                            b1.Property<string>("BottleClarifiedVolume")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_bottle_clarified_volume");

                            b1.Property<string>("CalibrationCertificate")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_calibration_certificate");

                            b1.Property<string>("Clarifier")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_clarifier");

                            b1.Property<string>("ClarifierAmount")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_clarifier_amount");

                            b1.Property<string>("ClearCollingCooler")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_clear_colling_cooler");

                            b1.Property<string>("HasDilution")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_has_dilution");

                            b1.Property<string>("Observations10")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_observations10");

                            b1.Property<string>("Observations9")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_observations9");

                            b1.Property<string>("Pressure")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_pressure");

                            b1.Property<string>("QuartzPattern")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_quartz_pattern");

                            b1.Property<string>("QuartzReading")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_quartz_reading");

                            b1.Property<string>("QuartzResult")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_quartz_result");

                            b1.Property<string>("Stabilization")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_stabilization");

                            b1.Property<string>("TubeCleaning")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clarification_saccharimeter_tube_cleaning");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.Conclusion", "Conclusion", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("InspectorPerformance")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("conclusion_inspector_performance");

                            b1.Property<string>("LaboratoryReceptivity")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("conclusion_laboratory_receptivity");

                            b1.Property<string>("Observations")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("conclusion_conclusion_observations");

                            b1.Property<string>("Pendencies")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("conclusion_pendencies");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.DesintegratorProbe", "DesintegratorProbe", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("AgainstKnifeConservation")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_against_knife_conservation");

                            b1.Property<string>("BrothExtraction")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_broth_extraction");

                            b1.Property<string>("CleanMixer")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_clean_mixer");

                            b1.Property<string>("Collect")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_collect");

                            b1.Property<string>("DesintegratorRpm")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_desintegrator_rpm");

                            b1.Property<string>("HammerConservation")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_hammer_conservation");

                            b1.Property<string>("HomogeneousSamples")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_homogeneous_samples");

                            b1.Property<string>("KnifeAgainstKnifeDistance")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_knife_against_knife_distance");

                            b1.Property<string>("KnifeConservation")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_knife_conservation");

                            b1.Property<string>("LastCrownChange")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_last_crown_change");

                            b1.Property<string>("LoadPosition")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_load_position");

                            b1.Property<string>("Observations3")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_observations3");

                            b1.Property<string>("Observations4")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_observations4");

                            b1.Property<string>("PreparationIndex")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_preparation_index");

                            b1.Property<string>("ProbeType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_probe_type");

                            b1.Property<string>("SampleAmount")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_sample_amount");

                            b1.Property<DateTime?>("SharpenedOrReplacedKnifeAt")
                                .IsRequired()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("desintegrator_probe_sharpened_or_replaced_knife_at");

                            b1.Property<string>("ToothedCrown")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_toothed_crown");

                            b1.Property<string>("ToothedCrownType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_toothed_crown_type");

                            b1.Property<string>("TubeDischarged")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_tube_discharged");

                            b1.Property<string>("TubeInserted")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("desintegrator_probe_tube_inserted");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.PressRefractometer", "PressRefractometer", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("BrothHomogenization")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_broth_homogenization");

                            b1.Property<string>("CollectorBottle")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_collector_bottle");

                            b1.Property<string>("DiscardCup")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_discard_cup");

                            b1.Property<string>("InternalTemperature")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_internal_temperature");

                            b1.Property<string>("Observations7")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_observations7");

                            b1.Property<string>("Observations8")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_observations8");

                            b1.Property<string>("PrecisionReading")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_precision_reading");

                            b1.Property<string>("PressCleaning")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_press_cleaning");

                            b1.Property<string>("Pressure")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_pressure");

                            b1.Property<string>("PressureGaugeCertificated")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_pressure_gauge_certificated");

                            b1.Property<string>("RefractometerBenchmarking")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_refractometer_benchmarking");

                            b1.Property<string>("RefractometerCalibrationCertificate")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_refractometer_calibration_certificate");

                            b1.Property<string>("RefractometerCleaning")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_refractometer_cleaning");

                            b1.Property<string>("Timer")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("press_refractometer_timer");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.SugarcaneBalance", "SugarcaneBalance", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("Calibration1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_calibration1");

                            b1.Property<string>("Calibration2")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_calibration2");

                            b1.Property<string>("CalibrationCertificate")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_calibration_certificate");

                            b1.Property<string>("CargoDraw")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_cargo_draw");

                            b1.Property<string>("FarmProviderPercentage")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_farm_provider_percentage");

                            b1.Property<string>("InScale")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_in_scale");

                            b1.Property<string>("Observations1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_observations1");

                            b1.Property<string>("Observations2")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_observations2");

                            b1.Property<string>("OutScale")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_out_scale");

                            b1.Property<string>("PlantFarmPercentage")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_plant_farm_percentage");

                            b1.Property<string>("PlantPercentage")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_plant_percentage");

                            b1.Property<string>("ProviderPercentage")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_provider_percentage");

                            b1.Property<string>("ResponsibleBody")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_responsible_body");

                            b1.Property<string>("ScaleObservations")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sugarcane_balance_scale_observations");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.OwnsOne("FiscalLabService.Domain.ValueObjects.SystemConsistency", "SystemConsistency", b1 =>
                        {
                            b1.Property<string>("VisitId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("Clarifier")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("system_consistency_clarifier");

                            b1.Property<decimal>("DifferenceAr")
                                .HasColumnType("numeric")
                                .HasColumnName("system_consistency_difference_ar");

                            b1.Property<decimal>("DifferenceAtr")
                                .HasColumnType("numeric")
                                .HasColumnName("system_consistency_difference_atr");

                            b1.Property<decimal>("DifferenceFiber")
                                .HasColumnType("numeric")
                                .HasColumnName("system_consistency_difference_fiber");

                            b1.Property<decimal>("DifferencePcc")
                                .HasColumnType("numeric")
                                .HasColumnName("system_consistency_difference_pcc");

                            b1.Property<decimal>("DifferencePol")
                                .HasColumnType("numeric")
                                .HasColumnName("system_consistency_difference_pol");

                            b1.Property<decimal>("DifferencePurity")
                                .HasColumnType("numeric")
                                .HasColumnName("system_consistency_difference_purity");

                            b1.Property<string>("Farm")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("system_consistency_farm");

                            b1.Property<string>("Observations")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("system_consistency_observations");

                            b1.Property<string>("Oc")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("system_consistency_oc");

                            b1.Property<string>("Owner")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("system_consistency_owner");

                            b1.HasKey("VisitId");

                            b1.ToTable("visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");

                            b1.OwnsOne("FiscalLabService.Domain.ValueObjects.SugarcaneAnalysis", "ConsecanaSugarcaneAnalysis", b2 =>
                                {
                                    b2.Property<string>("SystemConsistencyVisitId")
                                        .HasColumnType("character varying(36)");

                                    b2.Property<decimal>("Ar")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_ar");

                                    b2.Property<decimal>("Atr")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_atr");

                                    b2.Property<decimal>("Brix")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_brix");

                                    b2.Property<decimal>("Fiber")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_fiber");

                                    b2.Property<decimal>("Ls")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_ls");

                                    b2.Property<decimal>("Pbu")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_pbu");

                                    b2.Property<decimal>("Pcc")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_pcc");

                                    b2.Property<decimal>("Pol")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_pol");

                                    b2.Property<decimal>("Purity")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_consecana_purity");

                                    b2.HasKey("SystemConsistencyVisitId");

                                    b2.ToTable("visits");

                                    b2.WithOwner()
                                        .HasForeignKey("SystemConsistencyVisitId");
                                });

                            b1.OwnsOne("FiscalLabService.Domain.ValueObjects.SugarcaneAnalysis", "PlantSugarcaneAnalysis", b2 =>
                                {
                                    b2.Property<string>("SystemConsistencyVisitId")
                                        .HasColumnType("character varying(36)");

                                    b2.Property<decimal>("Ar")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_ar");

                                    b2.Property<decimal>("Atr")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_atr");

                                    b2.Property<decimal>("Brix")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_brix");

                                    b2.Property<decimal>("Fiber")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_fiber");

                                    b2.Property<decimal>("Ls")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_ls");

                                    b2.Property<decimal>("Pbu")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_pbu");

                                    b2.Property<decimal>("Pcc")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_pcc");

                                    b2.Property<decimal>("Pol")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_pol");

                                    b2.Property<decimal>("Purity")
                                        .HasColumnType("numeric")
                                        .HasColumnName("system_consistency_plant_purity");

                                    b2.HasKey("SystemConsistencyVisitId");

                                    b2.ToTable("visits");

                                    b2.WithOwner()
                                        .HasForeignKey("SystemConsistencyVisitId");
                                });

                            b1.Navigation("ConsecanaSugarcaneAnalysis")
                                .IsRequired();

                            b1.Navigation("PlantSugarcaneAnalysis")
                                .IsRequired();
                        });

                    b.OwnsMany("FiscalLabService.Domain.ValueObjects.Image", "Images", b1 =>
                        {
                            b1.Property<string>("visit_id")
                                .HasColumnType("character varying(36)");

                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.HasKey("visit_id", "id");

                            b1.ToTable("visit_images", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("visit_id");
                        });

                    b.Navigation("AnalyticalBalance")
                        .IsRequired();

                    b.Navigation("BasicInformation")
                        .IsRequired();

                    b.Navigation("BenchmarkingEquipment")
                        .IsRequired();

                    b.Navigation("ClarificationSaccharimeter")
                        .IsRequired();

                    b.Navigation("Conclusion")
                        .IsRequired();

                    b.Navigation("DesintegratorProbe")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("PressRefractometer")
                        .IsRequired();

                    b.Navigation("SugarcaneBalance")
                        .IsRequired();

                    b.Navigation("SystemConsistency")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
